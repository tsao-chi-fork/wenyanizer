{"version":3,"sources":["hanzi2num.js","Editor.js","asc2wy.js","utils.js","js2wy.js","App.js","index.js"],"names":["NUMS","MULTS1","MULTS4","FRACS1","FRACS4","module","exports","hanzi2num","s","_sp","units","i","length","u","replace","s2","split","_fh2n","m1","n1","m4","n4","st","result","stt","r","j","indexOf","Math","pow","hanzi2int","lastpow","shorthand","slice","_h2n","hanzi2frac","l","includes","s0","s1","fracs","concat","num2hanzi","n","nfrac","int2hanzi","z","m","k","floor","intn","mfrac","frac2hanzi","e","Component","props","value","mode","theme","onChange","className","name","editorProps","$blockScrolling","style","borderRadius","boxShadow","padding","COMPARATORS","OPERATORS","not","mod","TYPES","obj","num","arr","str","fun","bol","tmpVarCnt","getType","type","ans","Error","wrapVar","v","getValue","prop","startsWith","console","log","getCmp","LAMBDA","js2wy","jsStr","asc","Array","JSON","parse","indent","funcNames","addIndent","assert","cond","error","addVar","node","max","count","values","names","push","addFunc","arity","args","addOp","op","lhs","rhs","addWhile","addName","addIf","test","pop","container","lhssubs","containers","iterator","asc2wy","ast","js","tmpVars","allVars","varSet","Map","signatureCache","namesOnlyUsedOnce","body","counter","_get","insideTest","key","Set","add","getNamesOnlyUsedOnce","program","nodes","process","_node","handleDeclaration","handleExpressionStatement","expression","notImpErr","COMPARE_OPERATORS","operator","getIfProp","left","right","LITERAL_TYPES","getTripleProp","pos","start","addIfTestExpression","consequent","alternate","isSimpleForm","_name","addVarOp","initObjectProperties","properties","argument","initName","init","declarations","id","shouldAddManualBreak","update","isReassigned","sub","hasOwnProperty","shouldInit","appendDeclaration","LITERALS","isIteratingFromZeroToN","handleForStatement","object","newVar","newName","getNextTmpName","addNameOp","saveStagedToNewVar","property","handleMemberExpression","elements","map","x","addFunction","registerNewName","has","set","canUseStaged","handleUniversalCallExp","wrap","last","splice","tryToCompress","callee","arguments","funcName","signature","_getSignature","target","index","callJsGlobalFunction","msg","stringify","loc","errorSnippet","end","line","column","funcNode","params","isShinkable","undefined","tripleRep","preprocessTypeValueBeforeDeclare","get","createTempVarToWrap","endsWith","isConcat","isSliceOne","callExp","allArr","reverse","handleCallExpression","handleAssignmentExpression","handleUpdateExpression","declarator","dtype","mapType","extra","raw","toIgnoreValues","ast2asc","findIgnorableIden","replaceIgnorableIden","newData","getIdenOnlyUsedOnce","ignorable","ascPostProcess","js2asc","string","number","function","boolean","StringLiteral","NumericLiteral","Identifier","BooleanLiteral","DECLARATION_TYPES","Object","assign","VariableDeclarator","invalidNameSet","random","getRandomChineseName","useStyles","makeStyles","root","flexGrow","margin","display","justifyContent","alignItems","flexDirection","title","textAlign","paper","paddingTop","spacing","paddingBottom","paddingLeft","paddingRight","ReactDOM","render","prefersDarkMode","useMediaQuery","React","useState","setJs","wy","setWy","useMemo","createMuiTheme","palette","classes","onJsChanged","useCallback","debounce","toString","ThemeProvider","CssBaseline","href","Grid","item","xs","md","Paper","document","getElementById"],"mappings":"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","file":"static/js/main.6a417d8b.chunk.js","sourcesContent":["var NUMS = [\"零\",\"一\",\"二\",\"三\",\"四\",\"五\",\"六\",\"七\",\"八\",\"九\"]\r\nvar MULTS1 = [\"十\",\"百\",\"千\"];\r\nvar MULTS4 = [\"萬\",\"億\",\"兆\",\"京\",\"垓\",\"秭\",\"穣\",\"溝\",\"澗\",\"正\",\"載\",\"極\",\"恆河沙\",\"阿僧祇\",\"那由他\",\"不可思議\",\"無量大數\"];\r\nvar FRACS1 = [\"分\",\"釐\",\"毫\",\"絲\",\"忽\",\"微\",\"纖\",\"沙\"];\r\nvar FRACS4 = [\"塵\",\"埃\",\"渺\",\"漠\",\"模糊\",\"逡巡\",\"須臾\",\"瞬息\",\"彈指\",\"剎那\",\"六德\",\"虛\",\"空\",\"清\",\"淨\"];\r\n\r\n\r\nfunction hanzi2num(s){\r\n    // s = s.replace(/零/g,\"\")\r\n    s = s.replace(/有/g,\"\")\r\n\r\n    function _sp(s,units){\r\n        for (var i = 0; i < units.length; i++){\r\n            var u = units[i]\r\n            s = s.replace(u,\":\"+u+\",\")\r\n        }\r\n        var s2 = s.split(\",\")\r\n        for (var i = 0; i < s2.length; i++){\r\n            s2[i] = s2[i].split(\":\")\r\n        }\r\n        return s2;\r\n    }\r\n\r\n    function _h2n(s,m1,n1,m4,n4){\r\n        var st = _sp(s,m4);\r\n        var result = 0\r\n\r\n        for (var i = 0; i < st.length; i++){\r\n            if (st[i].length > 1 && st[i][0] == '零'){\r\n                st[i][0] = \"一\"\r\n            }\r\n            var stt = _sp(st[i][0], m1)\r\n            \r\n            var r = 0;\r\n            \r\n            var lastpow = 10;\r\n\r\n            for (var j = 0; j < stt.length; j++){\r\n                var shorthand = false;\r\n                if (stt[j][0][0] == \"零\"){\r\n                    stt[j][0]=stt[j][0].slice(1)\r\n                }else{\r\n                    shorthand = true;\r\n                }\r\n                if (stt[j].length == 1){\r\n                    if (stt[j][0] != ''){\r\n                        if (shorthand){\r\n                            r += NUMS.indexOf(stt[j][0])*(lastpow/10);\r\n                        }else{\r\n                            r += NUMS.indexOf(stt[j][0])\r\n                        }\r\n                    }\r\n                } else{\r\n                    if (stt[j][0] == ''){\r\n                        stt[j][0] = '一'\r\n                    }\r\n                    lastpow = Math.pow(n1,m1.indexOf(stt[j][1])+1)\r\n                    r += NUMS.indexOf(stt[j][0]) * lastpow;\r\n                }\r\n            }\r\n            if (st[i].length == 2){\r\n                result += r * Math.pow(n4,m4.indexOf(st[i][1])+1)\r\n            }else{\r\n                result += r\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    function _fh2n(s,m1,n1,m4,n4){\r\n        var st = _sp(s,m4);\r\n        var result = 0\r\n\r\n        for (var i = 0; i < st.length; i++){\r\n            if (st[i].length > 1 && st[i][0] == ''){\r\n                st[i][0] = \"一\"\r\n            }\r\n            var stt = _sp(st[i][0], m1)\r\n            var r = 0\r\n            for (var j = 0; j < stt.length; j++){\r\n                if (stt[j].length == 1){\r\n                    if (stt[j][0] != ''){\r\n                        r += NUMS.indexOf(stt[j][0])\r\n                    }\r\n                } else{\r\n                    if (stt[j][0] == ''){\r\n                        stt[j][0] = '一'\r\n                    }\r\n                    r += NUMS.indexOf(stt[j][0]) * Math.pow(n1,m1.indexOf(stt[j][1])+1)\r\n                }\r\n            }\r\n            if (st[i].length == 2){\r\n                result += r * Math.pow(n4,m4.indexOf(st[i][1])+1)\r\n            }else{\r\n                result += r\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    function hanzi2int(s){\r\n        return _h2n(\"零\"+s,MULTS1,10,MULTS4,10000)\r\n    }\r\n\r\n    function hanzi2frac(s){\r\n        var l = -1\r\n        for (var i = 0; i < s.length; i++){\r\n            if (FRACS1.includes(s[i])){\r\n                l = i;\r\n            }\r\n            if (FRACS4.includes(s[i])){\r\n                break\r\n            }\r\n        }\r\n        var n1 = _fh2n(s.slice(0,l+1),[],0,FRACS1,0.1) \r\n        var n2 = _fh2n(s.slice(l+1),MULTS1,10,FRACS4,0.0001) * Math.pow(0.1,FRACS1.length)\r\n        return n1 + n2\r\n    }\r\n    if (s[0]==\"負\"){\r\n        return -1*hanzi2num(s.slice(1));\r\n    }\r\n    if (s.includes(\"又\")){\r\n        var s0 = s.split(\"又\")[0]\r\n        var s1 = s.split(\"又\")[1]\r\n        return hanzi2int(s0) + hanzi2frac(s1)\r\n    }else{\r\n        var fracs = FRACS1.concat(FRACS4)\r\n        for (var i = 0; i < fracs.length; i++){\r\n            if (s.includes(fracs[i])){\r\n                return hanzi2frac(s)\r\n            }\r\n        }\r\n        return hanzi2int(s)\r\n    }\r\n}\r\n\r\nfunction num2hanzi(n,nfrac=6){\r\n    function int2hanzi(n){\r\n        if (n < 10){\r\n            return NUMS[n];\r\n        }\r\n        var s = \"\";\r\n        var z = -1;\r\n        for (var i = MULTS4.length-1; i>=0; i--){\r\n            var m = Math.pow(10000,i+1);\r\n            var k = Math.floor(n / m)\r\n            if (k>0){\r\n                n = n % m;\r\n                s+=int2hanzi(k)+MULTS4[i];\r\n                z = 0;\r\n            }else if (z == 0){\r\n                s+=\"零\"\r\n                z = 1;\r\n            }\r\n        }\r\n        for (var i = MULTS1.length-1; i>=0; i--){\r\n            var m = Math.pow(10,i+1);\r\n            var k = Math.floor(n / m)\r\n            if (k>0){\r\n                n = n % m;\r\n                s+=int2hanzi(k)+MULTS1[i];\r\n                z = 0;\r\n            }else if (z == 0){\r\n\r\n                s+=\"零\"\r\n                z = 1;\r\n            }\r\n            \r\n        }\r\n        if (n){\r\n            s += int2hanzi(n)\r\n        }\r\n        if (s[s.length-1]==\"零\"){\r\n            s = s.slice(0,s.length-1);\r\n        }\r\n        return s;\r\n    }\r\n    function frac2hanzi(n){\r\n        var mfrac = Math.pow(0.1,nfrac);\r\n        var s = \"\";\r\n        var z = -1;\r\n        for (var i = 0; i < FRACS1.length; i++){\r\n\r\n            var m = Math.pow(0.1,i+1);\r\n            if (m < mfrac){\r\n                break;\r\n            }\r\n            var k = Math.floor(n/m);\r\n            if (k>0){\r\n                n -= k*m;\r\n                s += int2hanzi(k)+FRACS1[i];\r\n                z = 0;\r\n            }else if (z == 0){\r\n                s += \"零\";\r\n                z = 1;\r\n            }\r\n        }\r\n        for (var i = 0; i < FRACS4.length; i++){\r\n            var m = Math.pow(0.0001,i+1)*(1e-8);\r\n            if (m < mfrac){\r\n                break;\r\n            }\r\n            var k = Math.floor(n/m);\r\n            if (k>0){\r\n                n -= k*m;\r\n                s += int2hanzi(k)+FRACS4[i];\r\n                z = 0;\r\n            }else if (z == 0){\r\n                s += \"零\";\r\n                z = 1;\r\n            }\r\n        }\r\n        if (s[s.length-1]==\"零\"){\r\n            s = s.slice(0,s.length-1);\r\n        }\r\n        return s;\r\n    }\r\n\r\n    if (n < 0){\r\n        return \"負\"+num2hanzi(-n);\r\n    }\r\n    var intn = Math.floor(n);\r\n    if (intn==n){\r\n        return int2hanzi(n);\r\n    }else{\r\n        return int2hanzi(intn)+\"又\"+frac2hanzi(n-intn);\r\n    }\r\n}\r\n\r\n\r\ntry{\r\n    module.exports = {hanzi2num, num2hanzi};\r\n}catch(e){}","import React from \"react\";\nimport AceEditor from \"react-ace\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/theme-mono_industrial\";\n\n\nexport const Component = (props) => {\n  return (\n    <AceEditor\n        value={props.value}\n      mode=\"javascript\"\n      theme=\"mono_industrial\"\n      onChange={props.onChange}\n      className=\"editor\"\n      name=\"JavaScript\"\n      editorProps={{ $blockScrolling: true }}\n      style={{\n        borderRadius: 8,\n        boxShadow: '0 6px 24px 4px rgba(10, 10, 14, 0.3)',\n        padding: 6\n      }}\n    />\n  );\n};\n","/**\r\n * The ASC here is a little bit diff from Wenyan ASC\r\n * \r\n * 1. The ASC used here should support `op==`, `op>=`, ...\r\n * 2. {op: \"op\", ...} may include another field called `name`, indicating the the assignment target\r\n * \r\n */\r\nimport { num2hanzi } from \"./hanzi2num\";\r\n//「」\r\n\r\nconst COMPARATORS = {\r\n  \"==\": \"等於\",\r\n  \"===\": \"等於\",\r\n  \"!=\": \"不等於\",\r\n  \"!==\": \"不等於\",\r\n  \"<=\": \"不大於\",\r\n  \">=\": \"不小於\",\r\n  \">\": \"大於\",\r\n  \"<\": \"小於\"\r\n};\r\n\r\nconst OPERATORS = {\r\n  \"*\": \"乘\",\r\n  \"/\": \"除\",\r\n  \"+\": \"加\",\r\n  \"-\": \"減\",\r\n  \"||\": \"中有陽乎\",\r\n  \"&&\": \"中無陰乎\",\r\n  not: \"變\",\r\n  mod: \"所餘幾何\"\r\n};\r\n\r\nconst TYPES = {\r\n  obj: \"物\",\r\n  num: \"數\",\r\n  arr: \"列\",\r\n  str: \"言\",\r\n  fun: \"術\",\r\n  bol: \"爻\"\r\n};\r\n\r\nvar tmpVarCnt = 0;\r\nvar randVarCnt = 0;\r\nfunction randVar() {\r\n  randVarCnt++;\r\n  return \"_rand\" + randVarCnt;\r\n}\r\nfunction currTmpVar() {\r\n  return \"_ans\" + tmpVarCnt;\r\n}\r\nfunction nextTmpVar() {\r\n  tmpVarCnt++;\r\n  return \"_ans\" + tmpVarCnt;\r\n}\r\n\r\nfunction prevTmpVar(n) {\r\n  return \"_ans\" + (tmpVarCnt - n + 1);\r\n}\r\n\r\nfunction assert(cond, error) {\r\n  if (!cond) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nfunction getType(type) {\r\n  const ans = TYPES[type];\r\n  if (ans == null) {\r\n    throw new Error(`Type ${type} not found`);\r\n  }\r\n\r\n  return ans;\r\n}\r\n\r\nfunction wrapVar(v) {\r\n  return `「${v}」`;\r\n}\r\n\r\nfunction getValue(prop) {\r\n  if (prop == null) {\r\n    return \"undefined\";\r\n  }\r\n  if (prop[0] === \"iden\") {\r\n    return `「${prop[1]}」`;\r\n  } else if (prop[0] === \"num\") {\r\n    return num2hanzi(prop[1]);\r\n  } else if (prop[0] === \"ans\") {\r\n    return \"其\";\r\n  } else if (prop[0] === \"lit\") {\r\n    return `「「${prop[1].slice(1, -1)}」」`;\r\n  } else if (prop[0] === \"bool\") {\r\n    if (prop[1]) {\r\n      return \"陽\";\r\n    }\r\n\r\n    return \"陰\";\r\n  } else if (prop[0] === \"data\") {\r\n    if (prop[1][prop[1].length - 1] === \"\\n\") {\r\n      return ` ${prop[1].slice(0, -1)}`;\r\n    }\r\n\r\n    return ` ${prop[1]}`;\r\n  } else if (prop[0].startsWith(\"op\")) {\r\n    console.log(\"Weird value\", prop);\r\n    return ``;\r\n  } else if (prop[0] === \"cmp\") {\r\n    return getCmp(prop);\r\n  } else if (prop[0] === \"ctnr\") {\r\n    if (prop[1] === \"len\") {\r\n      return \"長\";\r\n    } else if (prop[1] === \"rest\") {\r\n      return \"其餘\";\r\n    }\r\n  } else if (prop[0] === \"lop\") {\r\n    return (\r\n      OPERATORS[prop[1]] ||\r\n      (() => {\r\n        throw new Error();\r\n      })()\r\n    );\r\n  }\r\n\r\n  console.log(prop);\r\n  throw new Error(`Prop type ${prop[0]} not found`);\r\n}\r\n\r\nfunction getCmp(prop) {\r\n  if (prop[0] !== \"cmp\") {\r\n    throw new Error();\r\n  }\r\n\r\n  return COMPARATORS[prop[1]];\r\n}\r\n\r\nexport function asc2wy(asc) {\r\n  if (!(asc instanceof Array)) {\r\n    asc = JSON.parse(asc);\r\n  }\r\n\r\n  let ans = \"\";\r\n  let i = 0;\r\n  let indent = 0;\r\n  const funcNames = [];\r\n\r\n  function addIndent() {\r\n    for (let j = 0; j < indent; j++) {\r\n      ans += \"    \";\r\n    }\r\n  }\r\n\r\n  function assert(cond, error = \"\") {\r\n    if (!cond) {\r\n      console.log(asc[i]);\r\n      console.log(\"ERROR\", error);\r\n    }\r\n  }\r\n\r\n  function addVar(node) {\r\n    addIndent();\r\n    const n = Math.max(node.count, 1);\r\n    const type = TYPES[node.type];\r\n    if (type == null) {\r\n      throw new Error(`Type ${node.type} not found`);\r\n    }\r\n\r\n    ans += `吾有${num2hanzi(n)}${type}。`;\r\n    for (let i = 0; i < n; i++) {\r\n      if (node.values[i]) {\r\n        ans += `曰${getValue(node.values[i])}。`;\r\n      } else if (node.type === \"num\" && n > 1) {\r\n        ans += \"曰零。\";\r\n      }\r\n    }\r\n    for (let i = 0; i < node.names.length; i++) {\r\n      if (i === 0) {\r\n        ans += `名之`;\r\n      }\r\n\r\n      if (node.names[i] == null) {\r\n        node.names[i] = nextTmpVar();\r\n      }\r\n\r\n      ans += `曰「${node.names[i]}」`;\r\n    }\r\n\r\n    if (node.type === \"fun\") {\r\n      funcNames.push(node.names[0]);\r\n    }\r\n\r\n    ans += \"\\n\";\r\n  }\r\n\r\n  function addFunc(node) {\r\n    assert(node.arity != null);\r\n    addIndent();\r\n    ans += `欲行是術。必先得`;\r\n    addIndent();\r\n    for (let j = 0; j < node.arity; j++) {\r\n      ans += `一${getType(node.args[j].type)}。`;\r\n      ans += `曰「${node.args[j].name}」。`;\r\n    }\r\n    ans += \"\\n\";\r\n  }\r\n\r\n  function addOp(node) {\r\n    addIndent();\r\n    switch (node.op) {\r\n      case \"op+\":\r\n      case \"op-\":\r\n      case \"op/\":\r\n      case \"op*\":\r\n        ans += `${OPERATORS[node.op[2]]}${getValue(node.lhs)}以${getValue(\r\n          node.rhs\r\n        )}。`;\r\n        break;\r\n      case \"op%\":\r\n        ans += `除${getValue(node.lhs)}以${getValue(node.rhs)}。所餘幾何。`;\r\n        break;\r\n      case \"op||\":\r\n        ans += `夫${getValue(node.lhs)}${getValue(node.rhs)}中有陽乎。`;\r\n        break;\r\n      case \"op&&\":\r\n        ans += `夫${getValue(node.lhs)}${getValue(node.rhs)}中無陰乎。`;\r\n        break;\r\n      case \"op==\":\r\n      case \"op===\":\r\n      case \"op!=\":\r\n      case \"op!==\":\r\n      case \"op>\":\r\n      case \"op<\":\r\n      case \"op>=\":\r\n      case \"op<=\":\r\n        // TODO: make this shorter when new Wenyan syntax is available\r\n        if (node.name == null) {\r\n          throw new Error();\r\n        }\r\n\r\n        ans += `吾有一爻。名之曰${wrapVar(node.name)}。若${getValue(node.lhs)}${COMPARATORS[node.op.slice(2)]}${getValue(node.rhs)}者。昔之${wrapVar(node.name)}者。今陽是矣云云。`\r\n        break;\r\n      default:\r\n        console.log(node);\r\n        throw new Error();\r\n    }\r\n    ans += \"\\n\";\r\n  }\r\n\r\n  function addWhile(node) {\r\n    assert(node.value.length >= 2);\r\n    addIndent();\r\n    ans += `為是${getValue(node.value)}遍。\\n`;\r\n  }\r\n\r\n  function addName(node) {\r\n    addIndent();\r\n    assert(node.names.length >= 1);\r\n    ans += \"名之\";\r\n    for (let j = 0; j < node.names.length; j++) {\r\n      ans += `曰「${node.names[j]}」。`;\r\n    }\r\n    ans += \"\\n\";\r\n  }\r\n\r\n  function addIf(node) {\r\n    assert(node.test.length === 1 || node.test.length >= 3);\r\n    addIndent();\r\n    ans += \"若\";\r\n    if (node.test && node.test.length >= 3) {\r\n      for (let j = 0; j < node.test.length; j++) {\r\n        if (node.test[j][0] === \"ctnr\") {\r\n          if (node.test[j][1] === \"len\") {\r\n            ans += \"之長\";\r\n          } else if (node.test[j][1] === \"subs\") {\r\n            ans += `之${getValue(node.test[++j])}`;\r\n          }\r\n        } else {\r\n          ans += getValue(node.test[j]);\r\n        }\r\n      }\r\n    } else if (node.test && node.test.length === 1) {\r\n      ans += `${getValue(node.test[0])}`;\r\n    } else {\r\n      console.log(node);\r\n      throw new Error();\r\n    }\r\n\r\n    ans += \"者。\\n\";\r\n    indent++;\r\n  }\r\n\r\n  for (i = 0; i < asc.length; i++) {\r\n    const node = asc[i];\r\n    if (node.op.startsWith(\"op\")) {\r\n      addOp(node);\r\n      continue;\r\n    }\r\n\r\n    switch (node.op) {\r\n      case \"var\":\r\n        addVar(node);\r\n        break;\r\n      case \"fun\":\r\n        addFunc(node);\r\n        break;\r\n      case \"funbody\":\r\n        addIndent();\r\n        ans += \"乃行是術曰。\\n\";\r\n        indent++;\r\n        break;\r\n      case \"whilen\":\r\n        addWhile(node);\r\n        indent++;\r\n        break;\r\n      case \"whiletrue\":\r\n        addIndent();\r\n        ans += \"恆為是。\\n\";\r\n        indent++;\r\n        break;\r\n      case \"print\":\r\n        addIndent();\r\n        ans += \"書之。\\n\";\r\n        break;\r\n      case \"end\":\r\n        indent--;\r\n        addIndent();\r\n        ans += \"云云。\\n\";\r\n        break;\r\n      case \"name\":\r\n        addName(node);\r\n        break;\r\n      case \"if\":\r\n        addIf(node);\r\n        break;\r\n      case \"else\":\r\n        indent--;\r\n        addIndent();\r\n        indent++;\r\n        ans += \"若非。\\n\";\r\n        break;\r\n      case \"return\":\r\n        addIndent();\r\n        ans += `乃得 ${getValue(node.value)}\\n`;\r\n        break;\r\n      case \"funend\":\r\n        indent--;\r\n        addIndent();\r\n        ans += `是謂「${funcNames.pop()}」之術也。\\n\\n`;\r\n        break;\r\n      case \"push\":\r\n        addIndent();\r\n        ans += `充「${node.container}」以${getValue(node.values[0])}。`;\r\n        for (let i = 1; i < node.values.length; i++) {\r\n          ans += `以${getValue(node.values[i])}。`;\r\n        }\r\n\r\n        ans += \"\\n\";\r\n        break;\r\n      case \"break\":\r\n        addIndent();\r\n        ans += \"乃止。\\n\";\r\n        break;\r\n      case \"reassign\":\r\n        addIndent();\r\n        assert(node.lhs[0] === \"iden\");\r\n        if (node.lhssubs) {\r\n          ans += `昔之「${node.lhs[1]}」之${getValue(node.lhssubs)}者。`;\r\n        } else {\r\n          ans += `昔之「${node.lhs[1]}」者。`;\r\n        }\r\n        ans += `今${getValue(node.rhs)}是矣。\\n`;\r\n        break;\r\n      case \"call\":\r\n        addIndent();\r\n        ans += `施「${node.fun}」`;\r\n        for (let j = 0; j < node.args.length; j++) {\r\n          ans += `於${getValue(node.args[j])}。`;\r\n        }\r\n        ans += \"\\n\";\r\n        break;\r\n      case \"comment\":\r\n        addIndent();\r\n        ans += `批曰。${getValue(node.value)}\\n`;\r\n        break;\r\n      case \"subscript\":\r\n        addIndent();\r\n        ans += `夫「${node.container}」之${getValue(node.value)}。\\n`;\r\n        break;\r\n      case \"not\":\r\n        addIndent();\r\n        ans += `變${getValue(node.value)}\\n`;\r\n        break;\r\n      case \"cat\":\r\n        addIndent();\r\n        ans += `銜${wrapVar(node.containers[0])}`;\r\n        for (let i = 1; i < node.containers.length; i++) {\r\n          ans += `以${wrapVar(node.containers[i])}`;\r\n        }\r\n        ans += \"。\\n\";\r\n        break;\r\n      case \"for\":\r\n        addIndent();\r\n        ans += `凡${wrapVar(node.container)}中之${wrapVar(node.iterator)}\\n`;\r\n        indent++;\r\n        break;\r\n      case \"discard\":\r\n        ans += \"噫。\";\r\n        break;\r\n      case \"length\":\r\n        addIndent();\r\n        ans += `夫${wrapVar(node.container)}之長。`;\r\n        break;\r\n      default:\r\n        console.log(node);\r\n        throw new Error(\"NotImp\");\r\n    }\r\n  }\r\n\r\n  return ans;\r\n}\r\n\r\n","export const LAMBDA = '甲乙丙丁戊己庚辛壬癸十二地支子丑寅卯辰巳午未申酉戌亥'.split('');\r\nvar NUMS = [\"零\",\"一\",\"二\",\"三\",\"四\",\"五\",\"六\",\"七\",\"八\",\"九\"];\r\n\r\nexport function getRandomChineseName(invalidNameSet) {\r\n  let name = LAMBDA[Math.floor(Math.random() * LAMBDA.length)];\r\n  while (invalidNameSet.has(name)) {\r\n    name += NUMS[Math.floor(Math.random() * NUMS.length)];\r\n  }\r\n  return name;\r\n}","import { parse } from \"@babel/parser\";\r\nimport { asc2wy } from \"./asc2wy\";\r\nimport { getRandomChineseName, LAMBDA } from \"./utils\";\r\n\r\nexport function js2wy(jsStr) {\r\n  const asc = js2asc(jsStr);\r\n  return asc2wy(asc);\r\n}\r\n\r\nfunction js2asc(jsStr) {\r\n  const jsAst = parse(jsStr);\r\n  const asc = ast2asc(jsAst, jsStr);\r\n  ascPostProcess(asc);\r\n  return asc;\r\n}\r\n\r\nfunction ascPostProcess(asc) {\r\n  function getIdenOnlyUsedOnce() {\r\n    const count = {};\r\n    function add(name) {\r\n      if (count[name] == null) {\r\n        count[name] = 1;\r\n      } else {\r\n        count[name]++;\r\n      }\r\n    }\r\n\r\n    for (const node of asc) {\r\n      for (const key in node) {\r\n        if (node[key] && node[key][0] === \"iden\") {\r\n          add(node[key][1]);\r\n        }\r\n      }\r\n    }\r\n\r\n    const ans = new Set();\r\n    for (const key in count) {\r\n      if (count[key] === 1) {\r\n        ans.add(key);\r\n      }\r\n    }\r\n\r\n    return ans;\r\n  }\r\n\r\n  function findIgnorableIden(op) {\r\n    for (const key in op) {\r\n      if (\r\n        op[key] &&\r\n        op[key][0] === \"iden\" &&\r\n        namesOnlyUsedOnce.has(op[key][1])\r\n      ) {\r\n        return op[key][1];\r\n      }\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  function replaceIgnorableIden(op, name, newData) {\r\n    for (const key in op) {\r\n      if (op[key][0] === \"iden\" && op[key][1] === name) {\r\n        op[key] = newData;\r\n        return op;\r\n      }\r\n    }\r\n\r\n    throw new Error();\r\n  }\r\n\r\n  const namesOnlyUsedOnce = getIdenOnlyUsedOnce();\r\n  for (let i = 1; i < asc.length; i++) {\r\n    const ignorable = findIgnorableIden(asc[i]);\r\n    if (ignorable == null) {\r\n      continue;\r\n    }\r\n\r\n    if (\r\n      asc[i - 1].op === \"var\" &&\r\n      asc[i - 1].values.length === 1 &&\r\n      asc[i - 1].names.length === 1 &&\r\n      asc[i - 1].names[0] === ignorable\r\n    ) {\r\n      replaceIgnorableIden(asc[i], ignorable, asc[i - 1].values[0]);\r\n      asc.splice(i - 1, 1);\r\n      i--;\r\n    }\r\n  }\r\n}\r\n\r\nconst LITERAL_TYPES = {\r\n  string: \"lit\",\r\n  number: \"num\",\r\n  function: \"fun\",\r\n  boolean: \"bool\",\r\n  StringLiteral: \"lit\",\r\n  NumericLiteral: \"num\",\r\n  Identifier: \"iden\",\r\n  BooleanLiteral: \"bool\"\r\n};\r\n\r\nconst DECLARATION_TYPES = Object.assign(\r\n  {\r\n    VariableDeclarator: \"var\"\r\n  },\r\n  LITERAL_TYPES\r\n);\r\n\r\nvar tmpVars = [];\r\nvar allVars = [];\r\nvar varSet = new Set();\r\nvar varIndex = 0;\r\nfunction getNextTmpName() {\r\n  const name = getRandomChineseName(varSet);\r\n  tmpVars.push(name);\r\n  varIndex++;\r\n  return name;\r\n}\r\n\r\nfunction mapType(type, value) {\r\n  if (DECLARATION_TYPES[type]) {\r\n    return DECLARATION_TYPES[type];\r\n  }\r\n\r\n  if (type === \"ArrowFunctionExpression\" || type === \"FunctionExpression\") {\r\n    return \"fun\";\r\n  }\r\n\r\n  if (type === \"ArrayExpression\") {\r\n    return \"arr\";\r\n  }\r\n\r\n  if (type === \"ObjectExpression\") {\r\n    return \"obj\";\r\n  }\r\n\r\n  if (value instanceof Array) {\r\n    return \"arr\";\r\n  }\r\n\r\n  if (value instanceof Object) {\r\n    return \"obj\";\r\n  }\r\n\r\n  throw new Error(`Unknown type ${typeof value} of ${value}`);\r\n}\r\n\r\nconst LITERALS = {\r\n  NumericLiteral: \"num\",\r\n  Identifier: \"iden\",\r\n  BooleanLiteral: \"bol\",\r\n  StringLiteral: \"str\"\r\n};\r\n\r\nconst COMPARE_OPERATORS = [\"!=\", \"==\", \">=\", \"<=\", \"<\", \">\", \"===\", \"!==\"];\r\nconst OPERATORS = [\r\n  \"!=\",\r\n  \"==\",\r\n  \">=\",\r\n  \"<=\",\r\n  \"<\",\r\n  \">\",\r\n  \"+\",\r\n  \"-\",\r\n  \"*\",\r\n  \"/\",\r\n  \"%\",\r\n  \"&&\",\r\n  \"||\"\r\n];\r\n\r\nfunction isSimpleForm(_node) {\r\n  return OPERATORS.includes(_node.operator);\r\n}\r\n\r\nfunction getNamesOnlyUsedOnce(body) {\r\n  const counter = {};\r\n  function count(v) {\r\n    if (v in counter) {\r\n      counter[v] += 1;\r\n    } else {\r\n      counter[v] = 1;\r\n    }\r\n  }\r\n\r\n  function _get(node, insideTest = false) {\r\n    if (!node || typeof node !== \"object\") {\r\n      return;\r\n    }\r\n\r\n    if (node.type === \"Identifier\") {\r\n      count(node.name);\r\n      if (insideTest) {\r\n        count(node.name);\r\n        count(node.name);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (node instanceof Array) {\r\n      for (const subNode of node) {\r\n        _get(subNode, insideTest);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    for (const key in node) {\r\n      const v =\r\n        insideTest || key === \"test\" || key === \"arguments\" || key === \"update\";\r\n      // (key === \"right\" && node.type === \"ForOfStatement\");\r\n      _get(node[key], v);\r\n    }\r\n  }\r\n\r\n  _get(body);\r\n  const ans = new Set();\r\n  for (const key in counter) {\r\n    if (counter[key] === 2) {\r\n      ans.add(key);\r\n    }\r\n  }\r\n\r\n  return ans;\r\n}\r\n\r\nfunction isReassigned(name, node) {\r\n  if (!node || typeof node !== \"object\") {\r\n    return false;\r\n  }\r\n\r\n  if (\r\n    node.left &&\r\n    node.left.name === name &&\r\n    node.type === \"AssignmentExpression\"\r\n  ) {\r\n    return true;\r\n  }\r\n\r\n  if (node.type === \"UpdateExpression\" && node.argument.name === name) {\r\n    return true;\r\n  }\r\n\r\n  if (node instanceof Array) {\r\n    for (const sub of node) {\r\n      if (isReassigned(name, sub)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  for (const key in node) {\r\n    if (node.hasOwnProperty(key) && isReassigned(name, node[key])) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction isIteratingFromZeroToN(_node) {\r\n  if (!_node.init || _node.init.declarations.length !== 1) {\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    if (_node.init.declarations[0].init.value !== 0) {\r\n      return false;\r\n    }\r\n\r\n    if (_node.test.left.name !== _node.init.declarations[0].id.name) {\r\n      return false;\r\n    }\r\n\r\n    if (_node.test.operator !== \"<\") {\r\n      return false;\r\n    }\r\n\r\n    if (!(_node.test.right.type in LITERALS)) {\r\n      return false;\r\n    }\r\n\r\n    if (_node.update.operator !== \"++\") {\r\n      return false;\r\n    }\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Convert JS AST to Wenyan Lang ASC\r\n *\r\n * @param {Ast} ast\r\n * @param {string} js\r\n */\r\nfunction ast2asc(ast, js) {\r\n  tmpVars = [];\r\n  allVars = [];\r\n  varSet = new Map();\r\n  const signatureCache = {};\r\n  const namesOnlyUsedOnce = getNamesOnlyUsedOnce(ast.program.body);\r\n  const nodes = ast.program.body;\r\n  const ans = [];\r\n  for (var node of nodes) {\r\n    process(node);\r\n  }\r\n\r\n  return ans;\r\n\r\n  function process(_node) {\r\n    switch (_node.type) {\r\n      case \"VariableDeclaration\":\r\n        handleDeclaration(_node);\r\n        break;\r\n      case \"ExpressionStatement\":\r\n        handleExpressionStatement(_node.expression);\r\n        break;\r\n      case \"UpdateExpression\":\r\n      case \"CallExpression\":\r\n        handleExpressionStatement(_node);\r\n        break;\r\n      case \"WhileStatement\":\r\n        if (_node.test.type === \"BooleanLiteral\") {\r\n          if (_node.test.value === true) {\r\n            ans.push({\r\n              op: \"whiletrue\"\r\n            });\r\n          }\r\n        } else {\r\n          notImpErr(_node);\r\n        }\r\n\r\n        for (const subNode of _node.body.body) {\r\n          process(subNode);\r\n        }\r\n\r\n        ans.push({\r\n          op: \"end\"\r\n        });\r\n        break;\r\n      case \"IfStatement\":\r\n        addIfTestExpression(_node);\r\n\r\n        for (const subNode of _node.consequent.body) {\r\n          process(subNode);\r\n        }\r\n\r\n        if (_node.alternate) {\r\n          ans.push({\r\n            op: \"else\"\r\n          });\r\n          for (const subNode of _node.alternate.body) {\r\n            process(subNode);\r\n          }\r\n        }\r\n\r\n        ans.push({\r\n          op: \"end\"\r\n        });\r\n        break;\r\n      case \"BreakStatement\":\r\n        ans.push({\r\n          op: \"break\"\r\n        });\r\n        break;\r\n      case \"LogicalExpression\":\r\n      case \"BinaryExpression\":\r\n        if (isSimpleForm(_node)) {\r\n          // TODO: remove name hotfix maybe\r\n          ans.push({\r\n            lhs: getTripleProp(_node.left, false),\r\n            rhs: getTripleProp(_node.right, true),\r\n            op: \"op\" + _node.operator,\r\n            name: _node._name\r\n          });\r\n        } else {\r\n          notImpErr(_node);\r\n        }\r\n        break;\r\n      case \"ObjectExpression\":\r\n        assert(_node._name != null);\r\n        addVarOp([_node._name], [], 'obj');\r\n        initObjectProperties(_node._name, _node.properties);\r\n        break;\r\n      case \"ReturnStatement\":\r\n        const v = {\r\n          op: \"return\",\r\n          value: getTripleProp(_node.argument, false),\r\n          pos: _node.start\r\n        };\r\n        if (v.value == null) {\r\n          delete v.value;\r\n        }\r\n        ans.push(v);\r\n        break;\r\n      case \"ForStatement\":\r\n        // TODO: Currently it only supports `for (let i = 0; i < n; i++)`,\r\n        // or `for (const a of b)`\r\n        handleForStatement(_node);\r\n        break;\r\n      case \"ForOfStatement\":\r\n        assert(_node.right.type === \"Identifier\");\r\n        ans.push({\r\n          op: \"for\",\r\n          container: _node.right.name,\r\n          iterator: getTripleProp(_node.left, false)[1]\r\n        });\r\n\r\n        for (const subNode of _node.body.body) {\r\n          process(subNode);\r\n        }\r\n\r\n        ans.push({\r\n          op: \"end\"\r\n        });\r\n        break;\r\n      case \"MemberExpression\":\r\n        handleMemberExpression(_node);\r\n        break;\r\n      case \"ArrayExpression\":\r\n        const name = _node._name || getNextTmpName();\r\n        addVarOp([name], [], 'arr');\r\n        ans.push({\r\n          op: \"push\",\r\n          container: name,\r\n          values: _node.elements.map((x) => getTripleProp(x, false))\r\n        });\r\n\r\n        if (_node._name == null) {\r\n          // Stage this variable\r\n          addVarOp([], [['iden', name]], 'arr');\r\n        }\r\n        break;\r\n      case \"UnaryExpression\":\r\n        ans.push({\r\n          op: \"not\",\r\n          value: getTripleProp(_node.argument, true),\r\n          pos: _node.start\r\n        });\r\n        break;\r\n      case \"FunctionDeclaration\":\r\n        addVarOp([_node.id.name], [], 'fun');\r\n        addFunction(_node);\r\n        break;\r\n      case \"EmptyStatement\":\r\n        break;\r\n      default:\r\n        notImpErr(_node);\r\n    }\r\n  }\r\n\r\n  function registerNewName(name, type) {\r\n    if (!varSet.has(name)) {\r\n      allVars.push(name);\r\n    }\r\n\r\n    varSet.set(name, type);\r\n  }\r\n\r\n  function addNameOp(names) {\r\n    ans.push({\r\n      op: \"name\",\r\n      names: names\r\n    });\r\n\r\n    for (const name of names) {\r\n      registerNewName(name, \"obj\");\r\n    }\r\n  }\r\n\r\n  function addVarOp(names, values, type) {\r\n    const count = Math.max(names.length, values.length);\r\n    ans.push({\r\n      op: \"var\",\r\n      count,\r\n      names,\r\n      values,\r\n      type\r\n    });\r\n\r\n    for (const name of names) {\r\n      registerNewName(name, type);\r\n    }\r\n  }\r\n\r\n  function saveStagedToNewVar() {\r\n    const newName = getNextTmpName();\r\n    addNameOp([newName]);\r\n    return newName;\r\n  }\r\n\r\n  function getIfProp(_node) {\r\n    if (_node.type === \"MemberExpression\") {\r\n      if (\r\n        _node.object.type === \"Identifier\" &&\r\n        _node.property.type === \"Identifier\" &&\r\n        _node.property.name === \"length\"\r\n      ) {\r\n        return [\r\n          [\"iden\", _node.object.name],\r\n          [\"ctnr\", \"len\"]\r\n        ];\r\n      } else if (\r\n        _node.object.type === \"Identifier\" &&\r\n        _node.property.type === \"BinaryExpression\" &&\r\n        _node.property.operator === \"-\" &&\r\n        _node.property.right.type === \"NumericLiteral\" &&\r\n        _node.property.right.value === 1\r\n      ) {\r\n        return [\r\n          [\"iden\", _node.object.name],\r\n          [\"ctnr\", \"subs\"],\r\n          getTripleProp(_node.property.left, false)\r\n        ];\r\n      } else {\r\n        console.log(_node);\r\n        throw new Error();\r\n      }\r\n    } else if (_node.type in LITERAL_TYPES) {\r\n      return [getTripleProp(_node, false)];\r\n    } else if (\r\n      _node.type === \"BinaryExpression\" ||\r\n      _node.type === \"LogicalExpression\"\r\n    ) {\r\n      return [getTripleProp(_node, false)];\r\n    } else {\r\n      throw new Error();\r\n    }\r\n  }\r\n\r\n  function tryToCompress(name) {\r\n    if (!namesOnlyUsedOnce.has(name)) {\r\n      return false;\r\n    }\r\n\r\n    const last = ans[ans.length - 1];\r\n    if (last.op === \"var\" && last.names[last.names.length - 1] === name) {\r\n      last.names.splice(last.names.length - 1, 1);\r\n      return true;\r\n    }\r\n\r\n    if (\r\n      last.op === \"reassign\" &&\r\n      last.lhs[1] === name &&\r\n      last.lhssubs == null\r\n    ) {\r\n      ans.splice(ans.length - 1, 1);\r\n      return true;\r\n    }\r\n\r\n    if (\r\n      last.op === \"name\" &&\r\n      last.names.length === 1 &&\r\n      last.names[0] === name\r\n    ) {\r\n      ans.splice(ans.length - 1, 1);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * This function is used to wrap the global object\r\n   * which has not been supported by wenyan.\r\n   *\r\n   * 1. It will create necessary function\r\n   * 2. Invoke the function\r\n   * 3. Return the output of it\r\n   *\r\n   * @param {*} _node\r\n   */\r\n  function callJsGlobalFunction(_node) {\r\n    assert(_node.type === \"CallExpression\");\r\n    let signature = \"\";\r\n    const args = [];\r\n    function _getSignature(target) {\r\n      if (target.type === \"Identifier\") {\r\n        signature += target.name;\r\n      } else if (target.type === \"MemberExpression\") {\r\n        _getSignature(target.object);\r\n        signature += \".\";\r\n        _getSignature(target.property);\r\n      } else if (target.type === \"CallExpression\") {\r\n        _getSignature(target.callee);\r\n        assert(target.arguments.length <= LAMBDA.length);\r\n        signature += \"(\";\r\n        for (let i = 0; i < target.arguments.length; i++) {\r\n          // Chinese char may introduce error\r\n          // const name = \"子\" + LAMBDA[i];\r\n          const name = \"_a\" + i;\r\n          signature += `${name},`;\r\n          args.push(name);\r\n        }\r\n        signature += \")\";\r\n      } else {\r\n        notImpErr();\r\n      }\r\n    }\r\n\r\n    _getSignature(_node);\r\n    let funcName;\r\n    if (signature in signatureCache) {\r\n      funcName = signatureCache[signature];\r\n    } else {\r\n      funcName = getNextTmpName();\r\n      signatureCache[signature] = funcName;\r\n      // TODO: refactor, extract all func together\r\n      addVarOp([funcName], [], \"fun\");\r\n      ans.push({\r\n        op: \"fun\",\r\n        arity: _node.arguments.length,\r\n        args: _node.arguments.map((x, index) => {\r\n          return { type: \"obj\", name: args[index] };\r\n        }),\r\n        pos: _node.start\r\n      });\r\n\r\n      ans.push({\r\n        op: \"funbody\"\r\n      });\r\n      ans.push({\r\n        op: \"return\",\r\n        value: [\"data\", signature]\r\n      });\r\n      ans.push({\r\n        op: \"funend\"\r\n      });\r\n    }\r\n\r\n    ans.push({\r\n      op: \"call\",\r\n      fun: funcName,\r\n      args: _node.arguments.map((x) => getTripleProp(x, false)),\r\n      pos: _node.start\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the triple tuple representation (used in Wenyan ASC) of a node\r\n   *\r\n   * @param {Node} _node\r\n   * @param {boolean} canUseStaged\r\n   */\r\n  function getTripleProp(_node, canUseStaged = false) {\r\n    if (_node == null) {\r\n      return undefined;\r\n    }\r\n\r\n    function wrap() {\r\n      if (canUseStaged) {\r\n        return [\"ans\", null];\r\n      }\r\n\r\n      const name = getNextTmpName();\r\n      addNameOp([name]);\r\n      return [\"iden\", name, _node.start];\r\n    }\r\n\r\n    if (_node.type === \"CallExpression\") {\r\n      handleUniversalCallExp(_node);\r\n      return wrap();\r\n    }\r\n\r\n    if (_node.type === \"MemberExpression\" || _node.type === \"CallExpression\") {\r\n      process(_node);\r\n      return wrap();\r\n    }\r\n\r\n    if (_node.type === \"ArrayExpression\") {\r\n      _node._name = getNextTmpName();\r\n      process(_node);\r\n      return [\"iden\", _node._name, _node.start];\r\n    }\r\n\r\n    if (_node.type === \"VariableDeclaration\") {\r\n      const names = handleDeclaration(_node);\r\n      assert(names.length === 1);\r\n      return [\"iden\", names[0], _node.start];\r\n    }\r\n\r\n    if (\r\n      _node.type === \"BinaryExpression\" ||\r\n      _node.type === \"LogicalExpression\" ||\r\n      _node.type === \"ObjectExpression\"\r\n    ) {\r\n      // TODO: remove this hotfix in the future version\r\n      if (\r\n        _node.type === \"ObjectExpression\" ||\r\n        COMPARE_OPERATORS.includes(_node.operator)\r\n      ) {\r\n        _node._name = getNextTmpName();\r\n        process(_node);\r\n        return [\"iden\", _node._name, _node.start];\r\n      }\r\n      process(_node);\r\n      return wrap();\r\n    }\r\n\r\n    if (_node.type === \"UnaryExpression\") {\r\n      if (_node.operator === \"-\") {\r\n        if (_node.argument.type === \"NumericLiteral\") {\r\n          return [\"num\", -_node.argument.value];\r\n        }\r\n\r\n        ans.push({\r\n          op: \"op-\",\r\n          lhs: [\"num\", 0],\r\n          rhs: getTripleProp(_node.argument, true)\r\n        });\r\n\r\n        return wrap();\r\n      } else if (_node.operator === \"!\") {\r\n        ans.push({\r\n          op: \"not\",\r\n          value: getTripleProp(_node.argument, true),\r\n          pos: _node.start\r\n        });\r\n        return wrap();\r\n      } else {\r\n        notImpErr(_node);\r\n      }\r\n    }\r\n\r\n    if (!(_node.type in LITERAL_TYPES)) {\r\n      notImpErr(_node);\r\n    }\r\n\r\n    if (_node.type === \"Identifier\") {\r\n      if (canUseStaged && tryToCompress(_node.name)) {\r\n        return [\"ans\", null];\r\n      }\r\n\r\n      return [\"iden\", _node.name, _node.start];\r\n    }\r\n\r\n    if (_node.type === \"StringLiteral\") {\r\n      if (_node.value) {\r\n        return [\"lit\", `\"${_node.value}\"`, _node.start];\r\n      }\r\n\r\n      return [\"lit\", null, _node.start];\r\n    }\r\n\r\n    return [LITERAL_TYPES[_node.type], _node.value, _node.start];\r\n  }\r\n\r\n  function handleUniversalCallExp(_node) {\r\n    if (varSet.has(_node.callee.name)) {\r\n      ans.push({\r\n        op: \"call\",\r\n        fun: _node.callee.name,\r\n        args: _node.arguments.map((x) => getTripleProp(x, false)),\r\n        pos: _node.start\r\n      });\r\n    } else {\r\n      callJsGlobalFunction(_node);\r\n    }\r\n  }\r\n\r\n  function assert(cond, msg) {\r\n    if (!cond) {\r\n      throw new Error(msg + JSON.stringify(node.loc.start));\r\n    }\r\n  }\r\n\r\n  function notImpErr(_node = node, msg = \"\") {\r\n    const errorSnippet = js.slice(_node.start, _node.end);\r\n    console.log(errorSnippet);\r\n    throw new Error(`NotImplementedError: line ${_node.loc.start.line}, col ${_node.loc.start.column};\r\n    \\t\"${errorSnippet}\"\r\n    \\t${msg}\r\n    The grammar is not supported yet.\r\n    `);\r\n  }\r\n\r\n  function addFunction(funcNode) {\r\n    ans.push({\r\n      op: \"fun\",\r\n      arity: funcNode.params.length,\r\n      args: funcNode.params.map((x) => {\r\n        const props = getTripleProp(x);\r\n        return {\r\n          name: props[1],\r\n          type: \"obj\"\r\n        };\r\n      }),\r\n      pos: funcNode.start\r\n    });\r\n    if (funcNode.id) {\r\n      // Skip Anonymous Function\r\n      registerNewName(funcNode.id.name, \"fun\");\r\n    }\r\n    ans.push({\r\n      op: \"funbody\",\r\n      pos: funcNode.start\r\n    });\r\n    for (const sub of funcNode.body.body) {\r\n      process(sub);\r\n    }\r\n    ans.push({\r\n      op: \"funend\",\r\n      pos: funcNode.end\r\n    });\r\n  }\r\n\r\n  function createTempVarToWrap(values, type = undefined, names = []) {\r\n    const tripleRep = values.map((x) => getTripleProp(x, false));\r\n    ({ type } = preprocessTypeValueBeforeDeclare(\r\n      type || tripleRep[0][0],\r\n      values[0]\r\n    ));\r\n    if (type === \"iden\") {\r\n      type = varSet.get(values[0]);\r\n      assert(type != null)\r\n    }\r\n\r\n    addVarOp(names, tripleRep, type);\r\n  }\r\n\r\n  function addIfTestExpression(_node) {\r\n    if (_node.test.type === \"BinaryExpression\") {\r\n      if (COMPARE_OPERATORS.includes(_node.test.operator)) {\r\n        ans.push({\r\n          op: \"if\",\r\n          test: [\r\n            ...getIfProp(_node.test.left),\r\n            [\"cmp\", _node.test.operator],\r\n            ...getIfProp(_node.test.right)\r\n          ]\r\n        });\r\n      } else if (_node.test in LITERAL_TYPES) {\r\n        ans.push({\r\n          op: \"if\",\r\n          test: [getTripleProp(_node.test, false)]\r\n        });\r\n      } else {\r\n        notImpErr(_node);\r\n      }\r\n    } else if (_node.test.type in LITERAL_TYPES) {\r\n      ans.push({\r\n        op: \"if\",\r\n        test: [getTripleProp(_node.test, false)],\r\n        pos: _node.start\r\n      });\r\n    } else if (\r\n      _node.test.type === \"LogicalExpression\" ||\r\n      _node.test.type === \"BinaryExpression\" ||\r\n      _node.test.type === \"UnaryExpression\"\r\n    ) {\r\n      ans.push({\r\n        op: \"if\",\r\n        test: [getTripleProp(_node.test, false)],\r\n        pos: _node.start\r\n      });\r\n    } else {\r\n      notImpErr(_node);\r\n    }\r\n  }\r\n\r\n  function handleExpressionStatement(_node) {\r\n    switch (_node.type) {\r\n      case \"CallExpression\":\r\n        handleCallExpression(_node);\r\n        break;\r\n      case \"ExpressionStatement\":\r\n        process(_node.expression);\r\n        break;\r\n      case \"AssignmentExpression\":\r\n        handleAssignmentExpression(_node);\r\n        break;\r\n      case \"UpdateExpression\":\r\n        handleUpdateExpression(_node);\r\n        break;\r\n      default:\r\n        notImpErr(_node, `Unknown expression ${_node.expression.type}`);\r\n    }\r\n  }\r\n\r\n  function handleUpdateExpression(_node) {\r\n    if (_node.operator === \"++\") {\r\n      ans.push({\r\n        op: \"op+\",\r\n        lhs: [\"iden\", _node.argument.name],\r\n        rhs: [\"num\", 1, _node.start]\r\n      });\r\n    } else if (_node.operator === \"--\") {\r\n      ans.push({\r\n        op: \"op-\",\r\n        lhs: [\"iden\", _node.argument.name],\r\n        rhs: [\"num\", 1, _node.start]\r\n      });\r\n    } else {\r\n      notImpErr(_node);\r\n    }\r\n    ans.push({\r\n      op: \"reassign\",\r\n      lhs: [\"iden\", _node.argument.name],\r\n      rhs: [\"ans\", null]\r\n    });\r\n  }\r\n\r\n  function handleCallExpression(_node) {\r\n    if (_node.callee.type === \"Identifier\") {\r\n      ans.push({\r\n        op: \"call\",\r\n        fun: _node.callee.name,\r\n        args: _node.arguments.map((x) => getTripleProp(x, false)),\r\n        pos: _node.start\r\n      });\r\n    } else if (_node.callee.object.name === \"console\") {\r\n      let isShinkable = true;\r\n      const n = _node.arguments.length;\r\n      for (let j = 0; j < n; j++) {\r\n        const name = _node.arguments[j].name;\r\n        if (\r\n          name !== allVars[allVars.length - n + j] ||\r\n          !namesOnlyUsedOnce.has(name) ||\r\n          ans[ans.length - n + j].names[0] !== name\r\n        ) {\r\n          isShinkable = false;\r\n          break;\r\n        }\r\n      }\r\n      if (isShinkable) {\r\n        // Remove the declaration target\r\n        for (let j = 0; j < n; j++) {\r\n          if (ans[ans.length - n + j].op === \"var\") {\r\n            ans[ans.length - n + j].names = [];\r\n          } else if (ans[ans.length - n + j].op === \"name\") {\r\n            ans.splice(ans.length - n + j, 1);\r\n          }\r\n        }\r\n      } else {\r\n        createTempVarToWrap(_node.arguments);\r\n      }\r\n      ans.push({\r\n        op: \"print\"\r\n      });\r\n    } else if (\r\n      _node.callee.type === \"MemberExpression\" &&\r\n      _node.callee.property.name === \"push\"\r\n    ) {\r\n      assert(_node.callee.object.type === \"Identifier\");\r\n      ans.push({\r\n        op: \"push\",\r\n        container: _node.callee.object.name,\r\n        pos: _node.callee.object.start,\r\n        values: _node.arguments.map((x) => getTripleProp(x, false))\r\n      });\r\n    } else if (_node.callee.type.endsWith(\"MemberExpression\")) {\r\n      // Concat\r\n      let isConcat = true;\r\n      let isSliceOne = false;\r\n      let callExp = _node;\r\n      const allArr = [];\r\n      while (callExp && callExp.type === \"CallExpression\") {\r\n        if (callExp.arguments.length !== 1) {\r\n          isConcat = false;\r\n          break;\r\n        }\r\n        allArr.push(callExp.arguments[0].name);\r\n        if (callExp.callee.property.name !== \"concat\") {\r\n          isConcat = false;\r\n          break;\r\n        }\r\n        callExp = callExp.callee.object;\r\n      }\r\n      if (\r\n        _node.callee.property.name === \"slice\" &&\r\n        _node.arguments.length === 1 &&\r\n        _node.arguments[0].value === 1 &&\r\n        _node.callee.object.type === \"Identifier\"\r\n      ) {\r\n        isSliceOne = true;\r\n      }\r\n      if (isConcat) {\r\n        allArr.push(callExp.name);\r\n        ans.push({\r\n          op: \"cat\",\r\n          containers: allArr.reverse(),\r\n          pos: _node.start\r\n        });\r\n        return;\r\n      } else if (isSliceOne) {\r\n        ans.push({\r\n          op: \"subscript\",\r\n          container: _node.callee.object.name,\r\n          value: [\"ctnr\", \"rest\"]\r\n        });\r\n        return;\r\n      }\r\n\r\n      handleUniversalCallExp(_node);\r\n    } else {\r\n      notImpErr(_node);\r\n    }\r\n  }\r\n\r\n  function handleAssignmentExpression(_node) {\r\n    assert(_node.operator === \"=\");\r\n    if (_node.left.type === \"Identifier\") {\r\n      if (_node.right.type === \"FunctionExpression\") {\r\n        {\r\n          // Assert we have initialized the function\r\n          const last = ans[ans.length - 1];\r\n          if (last.op !== \"var\" || last.names[0] !== _node.left.name) {\r\n            notImpErr(_node);\r\n          }\r\n        }\r\n        addFunction(_node.right);\r\n      } else {\r\n        ans.push({\r\n          op: \"reassign\",\r\n          lhs: [\"iden\", _node.left.name],\r\n          rhs: getTripleProp(_node.right, true)\r\n        });\r\n      }\r\n    } else if (_node.left.type.endsWith(\"Expression\")) {\r\n      if (\r\n        _node.left.object.type === \"Identifier\" &&\r\n        _node.left.property.type === \"BinaryExpression\" &&\r\n          _node.left.property.operator === \"-\" &&\r\n          _node.left.property.right.value === 1\r\n      ) {\r\n        const lhssubs = getTripleProp(_node.left.property.left, false);\r\n        ans.push({\r\n          op: \"reassign\",\r\n          lhssubs,\r\n          lhs: [\"iden\", _node.left.object.name],\r\n          rhs: getTripleProp(_node.right, true)\r\n        });\r\n      } else if (\r\n        _node.left.object.type === \"Identifier\" &&\r\n        _node.left.property.type === \"StringLiteral\"\r\n      ) {\r\n        ans.push({\r\n          op: \"reassign\",\r\n          lhssubs: [\"lit\", `\"${_node.left.property.value}\"`],\r\n          lhs: [\"iden\", _node.left.object.name],\r\n          rhs: getTripleProp(_node.right, true)\r\n        });\r\n      } else if (\r\n        _node.left.object.type === \"Identifier\" &&\r\n        _node.left.property.type === \"NumericLiteral\"\r\n      ) {\r\n        ans.push({\r\n          op: \"reassign\",\r\n          lhssubs: [\"num\", _node.left.property.value + 1],\r\n          lhs: [\"iden\", _node.left.object.name],\r\n          rhs: getTripleProp(_node.right, true)\r\n        });\r\n      } else {\r\n        notImpErr(_node);\r\n      }\r\n    } else {\r\n      notImpErr(_node);\r\n    }\r\n  }\r\n\r\n  function handleDeclaration(_node, defaultType = \"num\") {\r\n    const names = [];\r\n    for (let i = 0; i < _node.declarations.length; i++) {\r\n      const declarator = _node.declarations[i];\r\n      const name = declarator.id.name;\r\n      if (declarator.init == null) {\r\n        addVarOp([name], [], \"obj\");\r\n        names.push(name);\r\n      } else if (\r\n        declarator.init.type === \"BinaryExpression\" ||\r\n        declarator.init.type === \"CallExpression\" ||\r\n        declarator.init.type === \"MemberExpression\" ||\r\n        declarator.init.type === \"UnaryExpression\" ||\r\n        declarator.init.type === \"LogicalExpression\"\r\n      ) {\r\n        declarator.init._name = name;\r\n        process(declarator.init);\r\n        if (COMPARE_OPERATORS.includes(declarator.init.operator)) {\r\n        } else if (varSet.has(name)) {\r\n          ans.push({\r\n            op: \"reassign\",\r\n            lhs: [\"iden\", name],\r\n            rhs: [\"ans\", null]\r\n          });\r\n        } else {\r\n          addNameOp([name]);\r\n        }\r\n        names.push(name);\r\n      } else {\r\n        let value = declarator.init.value || declarator.init.name;\r\n        const dtype = mapType(declarator.init.type || typeof value, value);\r\n        appendDeclaration(dtype, value, name);\r\n        names.push(name);\r\n        if (dtype === \"fun\") {\r\n          if (\r\n            declarator.init.body.extra &&\r\n            declarator.init.body.extra.raw === \"0\"\r\n          ) {\r\n          } else if (\r\n            declarator.init.type === \"ArrowFunctionExpression\" ||\r\n            declarator.init.type === \"FunctionExpression\"\r\n          ) {\r\n            addFunction(declarator.init);\r\n          } else {\r\n            notImpErr(declarator);\r\n          }\r\n        }\r\n\r\n        if (dtype === \"obj\" && declarator.init.properties.length) {\r\n          // TODO: use new Syntax when object initialization is available\r\n          initObjectProperties(name, declarator.init.properties);\r\n        }\r\n\r\n        if (dtype === \"arr\" && declarator.init.elements.length) {\r\n          ans.push({\r\n            op: \"push\",\r\n            container: name,\r\n            values: declarator.init.elements.map((x) => getTripleProp(x, false))\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    return names;\r\n  }\r\n\r\n  function initObjectProperties(name, properties) {\r\n    for (const property of properties) {\r\n      ans.push({\r\n        op: \"reassign\",\r\n        lhs: [\"iden\", name],\r\n        lhssubs: [\"lit\", `\"${property.key.name || property.key.value}\"`],\r\n        rhs: getTripleProp(property.value, true)\r\n      });\r\n    }\r\n  }\r\n\r\n  function appendDeclaration(dtype, value, name) {\r\n    let type;\r\n    let toIgnoreValues;\r\n    ({ type, toIgnoreValues, value } = preprocessTypeValueBeforeDeclare(\r\n      dtype,\r\n      value\r\n    ));\r\n    addVarOp([name], toIgnoreValues ? [] : [[dtype, value]], type);\r\n  }\r\n\r\n  function preprocessTypeValueBeforeDeclare(dtype, value) {\r\n    let type = dtype;\r\n    let toIgnoreValues = type === \"fun\" || type === \"arr\" || type === \"obj\";\r\n    if (type === \"iden\") {\r\n      type = varSet.get(value) || \"obj\";\r\n      // Try to compress\r\n      const name = value;\r\n      if (namesOnlyUsedOnce.has(name)) {\r\n        const last = ans[ans.length - 1];\r\n      }\r\n    }\r\n    if (type === \"bool\") {\r\n      type = \"bol\";\r\n    }\r\n    if (dtype === \"lit\") {\r\n      type = \"str\";\r\n      if (value) {\r\n        value = `\"${value}\"`;\r\n      } else {\r\n        toIgnoreValues = true;\r\n      }\r\n    }\r\n    return { type, toIgnoreValues, value };\r\n  }\r\n\r\n  function handleMemberExpression(_node) {\r\n    let object = _node.object;\r\n    if (\r\n      _node.object.type === \"CallExpression\" ||\r\n      object.type === \"MemberExpression\"\r\n    ) {\r\n      process(_node.object);\r\n      const newVar = saveStagedToNewVar();\r\n      object = {\r\n        name: newVar,\r\n        type: \"Identifier\"\r\n      };\r\n    }\r\n    if (object.type !== \"Identifier\") {\r\n      notImpErr(_node);\r\n    }\r\n    if (_node.property.type === \"BinaryExpression\") {\r\n      if (_node.property.operator === \"-\" && _node.property.right.value === 1) {\r\n        ans.push({\r\n          op: \"subscript\",\r\n          container: object.name,\r\n          value: getTripleProp(_node.property.left, true)\r\n        });\r\n      } else {\r\n        process(_node.property);\r\n        ans.push({\r\n          op: \"subscript\",\r\n          container: object.name,\r\n          value: [\"ans\", null]\r\n        });\r\n      }\r\n    } else if (_node.property.type in LITERAL_TYPES) {\r\n      if (_node.property.name === \"length\") {\r\n        ans.push({\r\n          op: \"length\",\r\n          container: object.name\r\n        });\r\n      } else if (_node.property.name != null) {\r\n        ans.push({\r\n          op: \"subscript\",\r\n          container: object.name,\r\n          value: [\"lit\", `\"${_node.property.name}\"`]\r\n        });\r\n      } else if (_node.property.value != null) {\r\n        if (_node.property.type === \"StringLiteral\") {\r\n          ans.push({\r\n            op: \"subscript\",\r\n            container: object.name,\r\n            value: [\"lit\", `\"${_node.property.value}\"`]\r\n          });\r\n        } else {\r\n          assert(_node.property.type === 'NumericLiteral')\r\n          ans.push({\r\n            op: \"subscript\",\r\n            container: object.name,\r\n            value: [\"num\", _node.property.value + 1]\r\n          });\r\n        }\r\n      } else {\r\n        // TODO: add this part when wenyan has type assertion\r\n        // 1. if target is string, target[index]\r\n        // 2. if target is number, target[index + 1]\r\n        notImpErr(_node);\r\n      }\r\n    } else {\r\n      notImpErr(_node);\r\n    }\r\n  }\r\n\r\n  function handleForStatement(_node) {\r\n    const initName = _node.init.declarations[0].id.name;\r\n    // whether it is in the format of `for (let i = 0; i < n; i++)`\r\n    let shouldAddManualBreak =\r\n      !_node.init ||\r\n      !_node.init.declarations.length ||\r\n      _node.init.declarations[0].init.value !== 0 ||\r\n      !_node.update ||\r\n      _node.update.operator !== \"++\" ||\r\n      _node.update.argument.name !== initName ||\r\n      (_node.test &&\r\n        (_node.test.left.name !== initName ||\r\n          _node.test.operator !== \"<\" ||\r\n          !(_node.test.right.type in LITERAL_TYPES))) ||\r\n      isReassigned(initName, _node.body);\r\n    const shouldInit =\r\n      shouldAddManualBreak ||\r\n      (_node.init &&\r\n        _node.init.declarations &&\r\n        _node.init.declarations[0] &&\r\n        !_node.init.declarations[0].id.name.startsWith(\"_rand\"));\r\n    if (shouldInit) {\r\n      appendDeclaration(\"num\", _node.init.declarations[0].init.value, initName);\r\n    }\r\n    if (shouldAddManualBreak) {\r\n      ans.push({\r\n        op: \"whiletrue\"\r\n      });\r\n    } else if (isIteratingFromZeroToN(_node)) {\r\n      ans.push({\r\n        op: \"whilen\",\r\n        value: getTripleProp(_node.test.right),\r\n        pos: _node.start\r\n      });\r\n    } else {\r\n      notImpErr(_node);\r\n    }\r\n    for (const subNode of _node.body.body) {\r\n      process(subNode);\r\n    }\r\n    if (_node.test && shouldAddManualBreak) {\r\n      ans.push({\r\n        op: \"if\",\r\n        test: [getTripleProp(_node.test), [\"cmp\", \"==\"], [\"bool\", false]]\r\n      });\r\n      ans.push({\r\n        op: \"break\"\r\n      });\r\n      ans.push({\r\n        op: \"end\"\r\n      });\r\n    }\r\n    if (shouldInit) {\r\n      // Update\r\n      process(_node.update);\r\n    }\r\n    ans.push({\r\n      op: \"end\"\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\nimport {\n  makeStyles,\n  ThemeProvider,\n  createMuiTheme\n} from \"@material-ui/core/styles\";\nimport { Component as Editor } from \"./Editor\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { debounce } from \"lodash\";\nimport { js2wy } from \"./js2wy\";\nimport \"./App.css\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    margin: \"0 auto\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexDirection: \"column\"\n  },\n  title: {\n    margin: \"32px 0\",\n    textAlign: \"center\"\n  },\n  paper: {\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n    paddingLeft: theme.spacing(4),\n    paddingRight: theme.spacing(4),\n    boxShadow: \"0 6px 16px 12px rgba(10, 10, 16, 0.2)\"\n  }\n}));\n\nexport default function AutoGrid() {\n  const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\n  const [js, setJs] = React.useState(`function wenyanizer(js){\n    var ast = parse(js);\n    var asc = ast2asc(ast);\n  \tvar wy = asc2wy(asc);\n  \treturn wy;\n}`);\n  const [wy, setWy] = React.useState(`吾有一術。名之曰「文言轉換」\n欲行是術。必先得一物。曰「覺誒斯」。\n乃行是術曰。\n    施「語法分析」於「覺誒斯」。名之曰「抽象語法樹」。\n    施「樹鏈轉換」於「抽象語法樹」。名之曰「抽象語法鏈」。\n    施「定稿」於「抽象語法鏈」。名之曰「文言」。\n    乃得「文言」\n是謂「文言轉換」之術也。`);\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? \"dark\" : \"light\"\n        }\n      }),\n    [prefersDarkMode]\n  );\n  const classes = useStyles();\n  const onJsChanged = React.useCallback(\n    debounce((js) => {\n      try {\n        setWy(js2wy(js));\n      } catch (e) {\n        setWy(e.toString());\n      }\n    }, 1000),\n    []\n  );\n  const onChange = React.useCallback(\n    debounce((v) => {\n      setJs(v);\n      onJsChanged(v);\n    }, 50),\n    []\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className={classes.root}>\n        <div className={classes.title}>\n          <h1>文言转换 <a href=\"https://github.com/zxch3n/wenyanizer\">Wenyanizer</a></h1>\n          <p>\n            JavaScript →{\" \"}\n            <a href=\"https://github.com/LingDong-/wenyan-lang\">Wenyan Lang</a>\n          </p>\n        </div>\n        <Grid\n          container\n          spacing={2}\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n          }}\n        >\n          <Grid\n            item\n            xs={12}\n            md={6}\n            spacing={2}\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\"\n            }}\n          >\n            <Editor onChange={onChange} value={js} />\n          </Grid>\n          <Grid item xs={12} md={6} spacing={2}>\n            <Paper className={classes.paper}>\n              <pre>\n                <code>{wy}</code>\n              </pre>\n            </Paper>\n          </Grid>\n        </Grid>\n      </div>\n    </ThemeProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}