// Work in progress

statement           := reference_statement
                    | define_statement
                    | clean_statement
                    | print_statement 
                    | declare_statement
                    | if_statement

print_stm           := 書之
clean_stm           := 噫
uinit_declare_stm   := (吾有|今有) num type
init_define_stm     := 有 type (data|num|string_literal|identifier|bool_value)[reference_stm]
assign              := 曰
uinit_define_stm    := declare_stm [assign data]* [reference_stm][assign data]*
reference_stm       := 名之曰 identifier
identifier          := 「字+」
string_literal      := 「「字*」」
comment             := (注曰|疏曰|批曰)string_literal

function_start      := 欲行是術
function_arg        := 必先得 num type [assign identifier] 是術曰|乃行是術曰 
function_end        := 是謂 identifier 之術也
function_stm        := function_start function_arg [statement]+ function_end

num                 := (num_keywords)+
num_keywords        := 又|零|一|二|三|四|五|六|七|八|九|十|百|千|萬|億|兆|京|垓|秭|穣|溝|澗|正|載|極|分|釐|毫|絲|忽|微|塵|埃|渺|漠
type                := 數|列|言|術|爻
                            
for                 := 凡
for_in              := 中之
whiletrue           := 恆為是
whilelen0           := 為是
whilelen1           := 遍
break               := 乃止
else                := 若非
if                  := 若
expr                := 夫

call                := 施
discard             := 噫

rassign_a           := 昔之
rassign_b           := 今
rassign_c           := 是矣
ans                 := 其

ret                 := 乃得
retvoid             := 乃歸空無

end                 := 也|云云
if_statement        := 若condition者expr[若非expr]
pre_binary_op       := 加|減|乘|除
logic_math_op       := 中有陽乎|中無陰乎
logic_if_op         := 等於|弗等於|弗大於|弗小於|大於|小於
post_math_op        := 所餘幾何
pre_position        := 以|於
unary_op            := 變
bool_value          := 陰|陽
